using System.Linq;
using System.Numerics;
using Content.Client.Administration.Managers;
using Content.Shared.Ghost;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.UserInterface.Systems.Ghost.Controls
{
    [GenerateTypedNameReferences]
    public sealed partial class GhostTargetWindow : DefaultWindow
    {
        private List<(string, NetEntity)> _warps = new();
        private string _searchText = string.Empty;

        public event Action<NetEntity>? WarpClicked;
        public event Action? OnGhostnadoClicked;

        public GhostTargetWindow()
        {
            RobustXamlLoader.Load(this);
            SearchBar.OnTextChanged += OnSearchTextChanged;

            GhostnadoButton.OnPressed += _ => OnGhostnadoClicked?.Invoke();
        }

        public void UpdateWarps(IEnumerable<GhostWarp> warps)
        {
            // check if the client is an admin!
            var adminManager = IoCManager.Resolve<IClientAdminManager>();
            var isAdmin = adminManager.IsAdmin();
            // Server COULD send these sorted but how about we just use the client to do it instead
            _warps = warps
                .OrderBy(w => w.IsWarpPoint)
                .ThenBy(w => w.AdminOnly)
                .ThenBy(
                    w => w.DisplayName,
                    Comparer<string>.Create(
                        (x, y) =>
                            string.Compare(
                                x,
                                y,
                                StringComparison.Ordinal)))
                .ThenBy(
                    w => w.WarpKind,
                    Comparer<GhostStatus>.Create(
                    comparison: (x, y) =>
                        x == y
                            ? 0
                            : x < y
                                ? -1
                                : 1))
                .Select(
                    w =>
                    {
                        //okay first, if the WarpKind is CryoSleep, only show it for admins
                        if (w.WarpKind == GhostStatus.CryoSleep
                            && !isAdmin)
                        {
                            return (string.Empty, NetEntity.Invalid);
                        }
                        string name;
                        if (!w.IsWarpPoint)
                        {
                            if (string.IsNullOrEmpty(w.JobName))
                            {
                                w.JobName = "Unknown";
                            }
                            if (w.DupeNumber > 0)
                            {
                                name = w.WarpKind switch
                                {
                                    GhostStatus.Dead => Loc.GetString(
                                        "ghost-target-window-warp-button-dead-dupe",
                                        ("name", w.DisplayName),
                                        ("job", w.JobName),
                                        ("dupe", w.DupeNumber)),
                                    GhostStatus.Unconscious => Loc.GetString(
                                        "ghost-target-window-warp-button-unconscious-dupe",
                                        ("name", w.DisplayName),
                                        ("job", w.JobName),
                                        ("dupe", w.DupeNumber)),
                                    GhostStatus.Ghost => Loc.GetString(
                                        "ghost-target-window-warp-button-ghost-dupe",
                                        ("name", w.DisplayName),
                                        ("job", w.JobName),
                                        ("dupe", w.DupeNumber)),
                                    GhostStatus.CryoSleep => Loc.GetString(
                                        "ghost-target-window-warp-button-cryo-dupe",
                                        ("name", w.DisplayName),
                                        ("job", w.JobName),
                                        ("dupe", w.DupeNumber)),
                                    _ => Loc.GetString(
                                        "ghost-target-window-current-button-dupe",
                                        ("name", w.DisplayName),
                                        ("job", w.JobName),
                                        ("dupe", w.DupeNumber)),
                                };
                            }
                            else
                            {
                                name = w.WarpKind switch
                                {
                                    GhostStatus.Dead => Loc.GetString(
                                        "ghost-target-window-warp-button-dead",
                                        ("name", w.DisplayName),
                                        ("job", w.JobName)),
                                    GhostStatus.Unconscious => Loc.GetString(
                                        "ghost-target-window-warp-button-unconscious",
                                        ("name", w.DisplayName),
                                        ("job", w.JobName)),
                                    GhostStatus.Ghost => Loc.GetString(
                                        "ghost-target-window-warp-button-ghost",
                                        ("name", w.DisplayName),
                                        ("job", w.JobName)),
                                    GhostStatus.CryoSleep => Loc.GetString(
                                        "ghost-target-window-warp-button-cryo",
                                        ("name", w.DisplayName),
                                        ("job", w.JobName)),
                                    _ => Loc.GetString(
                                        "ghost-target-window-current-button",
                                        ("name", w.DisplayName),
                                        ("job", w.JobName)),
                                };
                            }
                        }
                        else
                            name = $"Warp: {w.DisplayName}"; //w.DisplayName;

                        return (name, w.Entity);
                    })
                .ToList();
        }

        public void Populate()
        {
            ButtonContainer.DisposeAllChildren();
            AddButtons();
        }

        private void AddButtons()
        {
            foreach (var (name, warpTarget) in _warps)
            {
                // If the name is empty, skip it.
                if (string.IsNullOrEmpty(name)
                    || warpTarget == NetEntity.Invalid)
                    continue;
                var currentButtonRef = new Button
                {
                    Text = name,
                    TextAlign = Label.AlignMode.Right,
                    HorizontalAlignment = HAlignment.Stretch,
                    VerticalAlignment = VAlignment.Center,
                    SizeFlagsStretchRatio = 1,
                    // MinSize = new Vector2(445, 1),
                    ClipText = true,
                };

                currentButtonRef.OnPressed += _ => WarpClicked?.Invoke(warpTarget);
                currentButtonRef.Visible = ButtonIsVisible(currentButtonRef);

                ButtonContainer.AddChild(currentButtonRef);
            }
        }

        private bool ButtonIsVisible(Button button)
        {
            return string.IsNullOrEmpty(_searchText) || button.Text == null || button.Text.Contains(_searchText, StringComparison.OrdinalIgnoreCase);
        }

        private void UpdateVisibleButtons()
        {
            foreach (var child in ButtonContainer.Children)
            {
                if (child is Button button)
                    button.Visible = ButtonIsVisible(button);
            }
        }

        private void OnSearchTextChanged(LineEdit.LineEditEventArgs args)
        {
            _searchText = args.Text;

            UpdateVisibleButtons();
            // Reset scroll bar so they can see the relevant results.
            GhostScroll.SetScrollValue(Vector2.Zero);
        }
    }
}
